###########################################################################################################################################
############################################################Microsoft PowerShell###########################################################
###########################################################################################################################################


##########################################################
Open IE and launch a link in fullscreen
##########################################################

      #Clear all precedent commands
      Clear-Host

      #Hide PowerShell window
      PowerShell.exe -windowstyle hidden powershell.ps1

      #IE specific action
      $ie = New-Object -ComObject InternetExplorer.Application
          $ie.Visible = $true
          $ie.fullscreen = $true;
          $ie.Navigate("http://link.com")
          

##########################################################
Interaction of IE (user keyboard)
##########################################################

      #List of SendKeys variable : https://msdn.microsoft.com/en-us/library/office/aa202943(v=office.10).aspx
      $wshell = New-Object -ComObject wscript.shell;
      $wshell.AppActivate('InternetExplorer.Application')	
      Sleep 5	
      #Send a Ctrl + R
      $wshell.SendKeys('^{r}')	
      Sleep 5


##########################################################
Interaction of IE (user keyboard) loop
##########################################################

      #Initiate the continue variable	
      $continue = $true
      while ($continue){    

        #Waiting the next refresh
          Start-Sleep -s 120

        #Input commands for refresh the report
        $wshell = New-Object -ComObject wscript.shell;
        $wshell.AppActivate('InternetExplorer.Application')	    
        Sleep 5
        #Send a Ctrl + R
        $wshell.SendKeys('^{r}')	
        Sleep 5
        #Send a Enter
        $wshell.SendKeys('~')	 
        Sleep 30	
        $wshell.SendKeys('~')	

        continue         

      }


##########################################################
Launch applications
##########################################################

      start "C:\Program Files (x86)\VMware\VMware Horizon View Client\vmware-view.exe"
      #IE specific action
Start-Process -FilePath "C:\Program Files (x86)\Internet Explorer\iexplore.exe" -ArgumentList 'https://link.com'


##########################################################
Copy a file
##########################################################

      Copy-Item "Source Folder" "Destinary Folder"


##########################################################
Open a bdd / launch a macro / close the bdd
##########################################################

      $MsAccess = New-Object -ComObject Access.Application
      $MsAccess.OpenCurrentDatabase('accdb file')
      $MsAccess.Run('macro name')
      $MsAccess.Quit()

##########################################################
Read the content of a txt
##########################################################

      $variable = (Get-Content "txt file") -join ";"
      
      
##########################################################
Send a mail with attachment
##########################################################      
      
      Function Global:Send-Email { 
      [cmdletbinding()]
      Param (
      [Parameter(Mandatory=$False,Position=0)]
      [String]$TOAddress = $TOvariable,
      [Parameter(Mandatory=$False,Position=1)]
      [String]$CCAddress = $CCvariable,
      [Parameter(Mandatory=$False,Position=2)]
      [String]$Subject = "Subject of the mail",
      [Parameter(Mandatory=$False,Position=3)]
      [String]$Body = "Pontypool"
            )
      Begin {
      Clear-Host
      ###Add-Type -assembly "Microsoft.Office.Interop.Outlook"
          }
      Process {
      ###Create an instance Microsoft Outlook
      $Outlook = New-Object -ComObject Outlook.Application
      $Mail = $Outlook.CreateItem(0)
      $Mail.To = "$TOvariable"
      $Mail.Cc = "$CCvariable"
      $Mail.Subject = $Subject
      $Mail.Body =$Body
       $Mail.HTMLBody =  "Hello, <br>"
       $Mail.HTMLBody += " <br>"
       $Mail.HTMLBody +=  "Body text<br>"
       $Mail.HTMLBody += " <br>"
       $Mail.HTMLBody += " <br>"
       $Mail.HTMLBody += "Regards, <br>"
       $File = "file to be attached"
       $Mail.Attachments.Add($File)
      $Mail.Send()
             } ###End of Process section
      End {
      ###Section to prevent error message in Outlook
      ##$Outlook.Quit()
      [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Outlook)
      $Outlook = $null
         } ###End of End section!
      } ###End of function

      ###Example of using this function
      Send-Email 
      
      
##########################################################
Create a folde in the folder with day and hours
##########################################################            

      New-Item -ItemType Directory -Path "link\Saves\.\$((Get-Date).ToString('dd-MM-yyyy'))\.\$((Get-Date).ToString('HH-mm'))"    
      
      
##########################################################
Remove file
##########################################################  

      Remove-Item "file link"
      
      
##########################################################
Generate a form & button 1
##########################################################  

      #Create the form
      Function Generate-Form {

          Add-Type -AssemblyName System.Windows.Forms    
          Add-Type -AssemblyName System.Drawing

          # Build Form
          $Form = New-Object System.Windows.Forms.Form
          $Form.Text = "Bundle IC AS L2 Monitoring"
          $Form.Size = New-Object System.Drawing.Size(330,235)
          $Form.StartPosition = "CenterScreen"
          $Form.MaximizeBox = $False 
          $Form.Topmost = $False
          $Form.ShowIcon = $False
          $Form.BackColor = "White"
     
          #Button 1
          $Button = New-Object System.Windows.Forms.Button
          $Button.Location = New-Object System.Drawing.Size(35,35)
          $Button.Size = New-Object System.Drawing.Size(245,23)
          $Button.Text = "Test connection"
          $Button.BackColor = "DarkBlue"
          $Button.ForeColor = "White"

          $Form.Controls.Add($Button)

          #Action when you click on the button
          $Button.Add_Click(
              {    
              Start-Process "http://link.com"
              }
          )


##########################################################
Installation of security certificates
########################################################## 

      #Define the folder of all certificates
      $Path = "C:\Folder\"
      #Define the extention of the certificates
      $Filetype = ".cer"

      $certFile = get-childitem $Path | where {$_.Extension -match $Filetype}
      $i = 0
      foreach ($cert in $certFile)
          {
              $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
              $cert.import($Path + $certfile.Name[$i])
              #Installation of all certificates in the "trusted root certificate" library of the current user
              $store = New-Object System.Security.Cryptography.X509Certificates.X509Store("Root","CurrentUser")
              $store.Open("MaxAllowed") 
              $store.Add($cert) 
              $store.Close()
              Write-Host "Certificate" $certfile.Name[$i] "- IMPORTED SUCCESSFULLY!"
              #Repeat for each certificate of the folder
              $i++            
      }


##########################################################
Close PowerShell console with ENTER key
########################################################## 

      Read-Host -Prompt "Press Enter to exit"
      
      
##########################################################
Proxy enable automation
########################################################## 

      $continue = $true
      while ($continue){    

	      #Waiting the next 10 seconds to refresh
            Start-Sleep -s 10
    
	      #Input commands for refresh the report
	      $RegKey = 'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings\Connections'
            $Settings = (Get-ItemProperty -Path $RegKey).DefaultConnectionSettings
 
            if ($Settings[8] -eq 1) {
                  $Settings[8] = 3
                  Set-ItemProperty -path $regKey -name DefaultConnectionSettings -value $Settings
                  #msg console /time:3 "Proxy is now enabled"
            }	
    
	continue          
      }



##########################################################
Edit file content
########################################################## 

	$path = "c:\Users\$($env:username)\desktop\test.txt" 
	(Get-Content $path) -replace "content","123" | out-file $path 



##########################################################
S/N Screens
########################################################## 

	$Monitors = Get-WmiObject WmiMonitorID -Namespace root\wmi
	$LogFile = "C:\monitors.txt"

	"Manufacturer,Name,Serial" | Out-File $LogFile

	ForEach ($Monitor in $Monitors)
	{
		$Manufacturer = ($Monitor.ManufacturerName -notmatch 0 | ForEach{[char]$_}) -join ""
		$Name = ($Monitor.UserFriendlyName -notmatch 0 | ForEach{[char]$_}) -join ""
		#ServiceTag
		$Serial = ($Monitor.SerialNumberID -notmatch 0 | ForEach{[char]$_}) -join ""

		"$Manufacturer,$Name,$Serial" | Out-File $LogFile -append
	}

	Read-Host -Prompt "Press Enter to exit"



##########################################################
Archiving folders
########################################################## 

	$dateMonth = $((Get-Date).ToString('MM')) - 1
	$dateYear = $((Get-Date).ToString('yyyy'))

	#Write-Host $dateMonth-$dateYear

	$source = "Z:\Airbus\Airbus_Project\IC_AS_L2\99 - Tools\Request Macro\BDD\Saves"
	$destination = "C:\Archives\.\$dateMonth-$dateYear.zip"

 	If(Test-path $destination) {Remove-item $destination}

		Add-Type -assembly "system.io.compression.filesystem"
		[io.compression.zipfile]::CreateFromDirectory($Source, $destination) 
		Sleep 10
		## removes all subfolders of a given folder 
 		[System.IO.Directory]::GetDirectories("C:\Saves") | 
 		foreach { 
 		remove-item $_  -Force -recurse
 		} 



##########################################################

########################################################## 
